# -*- coding: utf-8 -*-
"""Straighten Picture - NTK.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19XrTA8gO0WP_hwalGfUF3QZOGVog6oft

#Straighten Picture üéØ 


‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏†‡∏≤‡∏û‡∏ï‡∏£‡∏á‡∏°‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ


1.  ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û
‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
‡πÄ‡∏ö‡∏•‡∏≠‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ GaussianBlur
‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û
2. ‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ç‡∏≠‡∏ö‡∏†‡∏≤‡∏û
‡∏´‡∏≤‡∏Ç‡∏≠‡∏ö‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ Canny Edged
contour ‡∏†‡∏≤‡∏û
‡∏´‡∏≤‡∏°‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏ö‡∏†‡∏≤‡∏û
‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ warp image
3. ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏á‡∏≤‡∏†‡∏≤‡∏û



## ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô




1. upload ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô run ‡∏ó‡∏∏‡∏Å cell
2. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
"""

pip install imshowtools

#@title Import module
import os
import numpy as np
import cv2
from google.colab.patches import cv2_imshow # for image display
from skimage. filters import threshold_local
from google.colab import files
from IPython.display import HTML
from PIL import Image
from imshowtools import imshow

"""<h1>‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û<h1>"""

#@markdown <h3> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û Upload Image </h3>
#@markdown <h5>üì§ upload your image</h5>
display(HTML('<h3 style="color:Tomato;padding:5px;border:2px solid powderblue;Width:15%;">Select your image üöÄ</h3>'))
directory = os.getcwd()
uploaded = files.upload()
preupload = [os.path.join(directory, f) for f in uploaded.keys()]
image = preupload[0]
img = cv2.imread(image)

"""<h1>‡∏õ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û üìà<h1>

---


"""

#@markdown <h3> ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤</h3>
Grayimg = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) #convert to gray color

#@markdown <h3> ‡πÄ‡∏ö‡∏•‡∏≠‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î noise</h3>
#@markdown <h5>‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ GuassianBlur</h5>
#Blurring using the Gaussian function where pixels closer to the pixels color gets a higher weight
Blur = cv2.GaussianBlur(Grayimg,(13,13),2) #blur pic

#@markdown <h3> ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û</h3>
#@markdown <h5>‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö alpha ‡πÅ‡∏•‡∏∞ beta ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÇ‡∏î‡∏¢ alpha ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö contrast ‡πÅ‡∏•‡∏∞ beta ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á</h5>
alpha = 1.2 # Contrast control (1.0-3.0)
beta = 10 # Brightness control (0-100)
con = cv2.convertScaleAbs(Blur, alpha=alpha, beta=beta)

imshow(img,Grayimg,Blur,con,mode='BGR',size=(15,15),rows=2,padding=0)

"""<h1>‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ç‡∏≠‡∏ö‡∏†‡∏≤‡∏û üìê <h1>

---

# <h3>Morphological Transformations<h3>
1.    ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ Erosion ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö ‡∏•‡∏î noises 
2.   ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ Dilation ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÑ‡∏õ

<center>
<img src="https://drive.google.com/uc?export=view&id=1WBsIKiQ180gIgGiAHrRfa_Ll3IIwr1ZX" width="500"/>
</center>



*  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà [Morphological OpenCV](https://opencv24-python-tutorials.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_morphological_ops/py_morphological_ops.html)
"""

#@markdown <h3> üìë‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ç‡∏≠‡∏ö‡∏†‡∏≤‡∏ûüìë</h3>
#@markdown <h5>‡∏´‡∏≤‡∏Ç‡∏≠‡∏ö‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ Canny Edged ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ Morphology 1.dilate 2.erosion ‡πÅ‡∏•‡∏∞ threshold_otsu ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö threshold ‡∏•‡∏î‡∏™‡∏µ‡∏Ç‡∏≠‡∏á background  ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏°‡∏≤‡∏Å‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô</h5>
def remove_noise_and_smooth(file_name):
  kernel = np.ones((5,5))
  ret, th = cv2.threshold(file_name,
    0,  # threshold value, ignored when using cv2.THRESH_OTSU
    255,  # maximum value assigned to pixel values exceeding the threshold
    cv2.THRESH_BINARY + cv2.THRESH_OTSU)
  dilation = cv2.dilate(th,kernel,iterations = 3) # increases the white region in the image
  erosion = cv2.erode(dilation, kernel, iterations=2) #erodes away the boundaries
  imshow(th,dilation,erosion,size=(15,15),padding=0)
  return erosion
#Finding Intensity Gradient of the Image
edged = cv2.Canny(remove_noise_and_smooth(con), 300, 200)

#@markdown <h3> üìëContour ‡∏†‡∏≤‡∏û  üìë</h3>
#@markdown <h5> ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ Find & DrawContours ‡πÇ‡∏î‡∏¢ Find ‡∏à‡∏∞‡∏à‡∏±‡∏ö‡∏Ç‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞ Draw ‡∏Ñ‡∏∑‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡∏•‡∏á‡πÑ‡∏õ ‡πÇ‡∏î‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π</h5>
contours, _ = cv2.findContours(edged,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
Contourry = img.copy()
Contourry = cv2.drawContours(Contourry,contours,-1,(255,50,255),5)

#@markdown <h3> üìë ‡∏´‡∏≤‡∏°‡∏∏‡∏°‡∏Ç‡∏≠‡∏ö‡∏†‡∏≤‡∏û üìë</h3> <h5>‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î Area ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏ö‡∏†‡∏≤‡∏û 4 ‡∏î‡πâ‡∏≤‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡∏´‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 3000 ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏î‡∏Ç‡∏≠‡∏ö‡∏†‡∏≤‡∏û‡∏ô‡∏±‡πâ‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏à‡∏∏‡∏î‡∏°‡∏µ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π<h5>
Pop = img.copy()
MaxArea = 0
biggest = []
for i in contours:
  area = cv2.contourArea(i)
  if area > 3000:
    peri = cv2.arcLength(i,True)
    edge = cv2.approxPolyDP(i,0.02*peri,True)
    if area > MaxArea and len(edge)==4:
      biggest = edge
      MaxArea = area
if len(biggest) == 4:
  Pop = cv2.drawContours(Pop,biggest,-1,(255,0,255),20)

#@markdown <h3> üìë ‡∏•‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö üìë</h3> <h5>‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡πÇ‡∏î‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏°‡∏µ 4 ‡∏™‡∏µ ‡∏Ñ‡∏∑‡∏≠ 1.‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô 2.‡∏™‡∏µ‡∏™‡πâ‡∏°‡∏Ñ‡∏∑‡∏≠ ‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á 3.‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß-‡πÄ‡∏™‡πâ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞ 4.‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ ‡∏ã‡∏∂‡πà‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏•‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ ‡∏´‡∏≤‡∏Å‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û<h5>
w,h = img.shape[1::-1]
def drawRec(BiggestNew,mainframe):
  cv2.line (mainframe,(BiggestNew[0][0][0],BiggestNew[0][0][1]),(BiggestNew[1][0][0],BiggestNew[1][0][1]),(255,20,147),5)
  cv2.line (mainframe,(BiggestNew[0][0][0],BiggestNew[0][0][1]),(BiggestNew[2][0][0],BiggestNew[2][0][1]),(124,252,0),5)
  cv2.line (mainframe,(BiggestNew[3][0][0],BiggestNew[3][0][1]),(BiggestNew[2][0][0],BiggestNew[2][0][1]),(100,149,237),5)
  cv2.line (mainframe,(BiggestNew[3][0][0],BiggestNew[3][0][1]),(BiggestNew[1][0][0],BiggestNew[1][0][1]),(218,112,214),5)
imgwarp = img.copy()
Cornerf = img.copy()
if len(biggest) != 0:
  biggest = biggest.reshape((4,2))
  BiggestNew = np.zeros((4,1,2),dtype=np.int32)
  add = biggest.sum(1)
  BiggestNew[0]=biggest[np.argmin(add)]
  BiggestNew[3]=biggest[np.argmax(add)]
  dif = np.diff(biggest,axis=1)
  BiggestNew[1]=biggest[np.argmin(dif)]
  BiggestNew[2]=biggest[np.argmax(dif)]
  drawRec(BiggestNew,Cornerf)
  Cornerf = cv2.drawContours(Cornerf,BiggestNew,-1,(255,0,255),15)
  pts1 = np.float32(BiggestNew)
  pts2 = np.float32([[0,0],[w,0],[0,h],[w,h]])
  matrix = cv2.getPerspectiveTransform(pts1,pts2)
  imgwarp = cv2.warpPerspective(img,matrix,(w,h))

#REMOVE 20 PIXELS FORM EACH SIDE
imgwarp = imgwarp[20:imgwarp.shape[0]-20,20:imgwarp.shape[1]-20]
imgwarp= cv2.resize(imgwarp,(w,h))

imshow(edged,Contourry,Pop,Cornerf,mode='BGR',size=(15,15),rows=2,padding=0)

"""<h1>Enhancement<h1>

---



"""

#@markdown <h3> üìë ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏á‡∏≤‡∏†‡∏≤‡∏û üìë</h3>
#@markdown <h5>‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏™‡∏µ RGB ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ dilate ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏•‡∏≠‡∏î‡πâ‡∏ß‡∏¢ median blur ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ normalize ‡∏†‡∏≤‡∏û</h5>
rgb_planes = cv2.split(imgwarp)
result_norm_planes = []
for plane in rgb_planes:
    dilated_img = cv2.dilate(plane, np.ones((5,5), np.uint8))
    bg_img = cv2.medianBlur(dilated_img, 13)
    diff_img = 255 - cv2.absdiff(plane, bg_img)
    norm_img = cv2.normalize(diff_img,None, alpha=0, beta=255, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_8UC1)
    result_norm_planes.append(norm_img)
    
result_norm = cv2.merge(result_norm_planes)

#@markdown <h5> ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ threshold local </h5>
grayscaled = cv2.cvtColor(result_norm,cv2.COLOR_BGR2GRAY)
T = threshold_local(grayscaled,11,offset=10,method="gaussian")
warp = (grayscaled>T).astype("uint8")*255

#@markdown <h5> ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ Adaptive threshold ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß (255,255,255)</h5>
thresh = cv2.adaptiveThreshold(grayscaled, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 7, 9)

#in result pic will be white tone color(pixel value= 255) so replace 255 to (255,255,255), to convert white tone pixel to white.
# make background of input white where thresh is white
result = imgwarp.copy()
result[thresh==255] = (255,255,255)

imshow(imgwarp,result_norm,warp,result,mode='BGR',size=(15,15),rows=2,padding=0)

#@title üìë Select Picture üìë{ run: "auto" }
Image = "Scanned Picture" #@param ["Original Picture", "Shadow Removal", "Scanned Picture","Scanned Picture Ver.2"]
print('You selected',Image) 
if Image == 'Original Picture':
  imshow(imgwarp,size=(15,15),mode='BGR')
elif Image == 'Shadow Removal':
  imshow(result_norm,size=(15,15),mode='BGR')
elif Image == 'Scanned Picture':
  imshow(warp,size=(15,15),mode='BGR')
elif Image == 'Scanned Picture Ver.2':
  imshow(result,size=(15,15),mode='BGR')

"""<h1>Result‚ú®<h1>"""

imshow(img,Cornerf,imgwarp,warp,rows=1,size=(20,20),mode='BGR',padding=0)